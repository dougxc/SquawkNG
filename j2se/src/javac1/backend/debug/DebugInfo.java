/*
 * @(#)DebugInfo.java                   1.10 02/11/27
 *
 * Copyright 1993-2002 Sun Microsystems, Inc.  All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.
 */

package javac1.backend.debug;

import java.util.BitSet;
import javac1.Assert;
import javac1.backend.code.FrameMap;

/**
 * Debug information that is generated by the compiler.
 *
 * @author   Thomas Kotzmann
 * @version  1.00
 */
public class DebugInfo {
    /**
     * The code generation offset of the associated instruction.
     */
    private int offset;

    /**
     * The bytecode index of the associated instruction.
     */
    private int bci;

    /**
     * Whether or not this debug information refers to a call.
     */
    private boolean atCall;
    
    /**
     * The registers that can contain object pointers.
     */
    private BitSet oopRegs;

    /**
     * The current size of the stack frame.
     */
    private int frameSize;

    /**
     * Constructs a new debug information from the specified data.
     *
     * @param  offset     current code generation offset
     * @param  bci        bytecode index of the associated instruction
     * @param  atCall     whether or not information refers to a call
     * @param  oopRegs    list of ordinary object pointers
     * @param  frameSize  current size of the stack frame
     * @param  argCount   number of method arguments
     */
    public DebugInfo(int offset, int bci, boolean atCall, BitSet oopRegs,
            int frameSize, int argCount) {
        if (Assert.ASSERTS_ENABLED) {
            Assert.that(oopRegs.length() <= FrameMap.STACK_0 + frameSize + argCount, "too big reg value for stack size");
        }
        this.offset = offset;
        this.bci = bci;
        this.atCall = atCall;
        this.oopRegs = oopRegs;
        this.frameSize = frameSize;
    }
    
    /**
     * Returns the bytecode index of the associated instruction.
     *
     * @return  bytecode index of the instruction
     */
    public int getBci() {
        return bci;
    }
    
    /**
     * Returns the associated code generation offset.
     *
     * @return  code generation offset
     */
    public int getOffset() {
        return offset;
    }
    
    /**
     * Tests if this debug information refers to a call or not.
     *
     * @return  whether information refers to call or not
     */
    public boolean isAtCall() {
        return atCall;
    }
    
    /**
     * Returns the size of the stack frame.
     */
    public int getFrameSize() {
        return frameSize;
    }
    
    /**
     * Returns the numbers of registers that can contain object pointers.
     *
     * @return  array of pointer registers
     */
    public int[] getOopRegs() {
        int len = oopRegs.length();
        int[] regs = new int[len];
        int size = 0;
        for (int i = 0; i < len; i++) {
            if (oopRegs.get(i)) {
                regs[size++] = i;
            }
        }
        int[] result = new int[size];
        System.arraycopy(regs, 0, result, 0, size);
        return result;
    }
}
