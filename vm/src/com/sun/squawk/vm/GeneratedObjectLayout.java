//J2C:gol.c **DO NOT DELETE THIS LINE**
/* THIS FILE WAS GENERATED BY THE TRANSLATOR - DO NOT EDIT */
/*IFJ*/package com.sun.squawk.vm;
/*IFJ*/abstract public class GeneratedObjectLayout extends Segments {


        /*
         * Native method identifiers for virtual methods in java.lang.String
         */
        static final int 
        java_lang_String_at = 1,
        java_lang_String_isEightBit = 2,
        java_lang_String_length = 3;


        /*
         * Accessors for java.lang.Class fields
         */

        /** Getter for 'classReferences'. */
/*MAC*/int  Class_getClassReferences(int $obj) { return getWord($obj, 0); }
        /** Getter for 'interfaceSlotTables'. */
/*MAC*/int  Class_getInterfaceSlotTables(int $obj) { return getWord($obj, 1); }
        /** Getter for 'interfaceTypes'. */
/*MAC*/int  Class_getInterfaceTypes(int $obj) { return getWord($obj, 2); }
        /** Getter for 'objectReferences'. */
/*MAC*/int  Class_getObjectReferences(int $obj) { return getWord($obj, 3); }
        /** Getter for 'oopMap'. */
/*MAC*/int  Class_getOopMap(int $obj) { return getWord($obj, 4); }
        /** Getter for 'staticMethods'. */
/*MAC*/int  Class_getStaticMethods(int $obj) { return getWord($obj, 5); }
        /** Getter for 'superClass'. */
/*MAC*/int  Class_getSuperClass(int $obj) { return getWord($obj, 6); }
        /** Getter for 'symbols'. */
/*MAC*/int  Class_getSymbols(int $obj) { return getWord($obj, 7); }
        /** Getter for 'virtualMethods'. */
/*MAC*/int  Class_getVirtualMethods(int $obj) { return getWord($obj, 8); }
        /** Getter for 'access'. */
/*MAC*/int  Class_getAccess(int $obj) { return getUnsignedHalf($obj, 18); }
        /** Getter for 'elementType'. */
/*MAC*/int  Class_getElementType(int $obj) { return getUnsignedHalf($obj, 19); }
        /** Getter for 'type'. */
/*MAC*/int  Class_getType(int $obj) { return getUnsignedHalf($obj, 20); }
        /** Getter for 'firstVirtualMethod'. */
/*MAC*/int  Class_getFirstVirtualMethod(int $obj) { return getUnsignedByte($obj, 42); }
        /** Getter for 'instanceFieldsLength'. */
/*MAC*/int  Class_getInstanceFieldsLength(int $obj) { return getUnsignedByte($obj, 43); }
        /** Getter for 'pointerStaticFieldsLength'. */
/*MAC*/int  Class_getPointerStaticFieldsLength(int $obj) { return getUnsignedByte($obj, 44); }
        /** Getter for 'slotForClinit'. */
/*MAC*/int  Class_getSlotForClinit(int $obj) { return getUnsignedByte($obj, 45); }
        /** Getter for 'slotForInit'. */
/*MAC*/int  Class_getSlotForInit(int $obj) { return getUnsignedByte($obj, 46); }
        /** Getter for 'slotForMain'. */
/*MAC*/int  Class_getSlotForMain(int $obj) { return getUnsignedByte($obj, 47); }
        /** Getter for 'staticFieldsLength'. */
/*MAC*/int  Class_getStaticFieldsLength(int $obj) { return getUnsignedByte($obj, 48); }

        /*
         * Accessors for java.lang.Monitor fields
         */

        /** Getter for 'isInUse'. */
/*MAC*/boolean Monitor_isInUse(int $obj) { return getByte($obj, 14) != 0; }

        /*
         * Native method identifiers for static methods in java.lang.Native
         */
        static final int 
        java_lang_Native_arraycopy0 = 4,
        java_lang_Native_callStaticNoParm = 5,
        java_lang_Native_callStaticOneParm = 6,
        java_lang_Native_createClassState = 7,
        java_lang_Native_enableExcessiveGC = 8,
        java_lang_Native_exec = 9,
        java_lang_Native_exit = 10,
        java_lang_Native_fatalVMError = 11,
        java_lang_Native_freeMemory = 12,
        java_lang_Native_gc = 13,
        java_lang_Native_gcPersistentMemory = 14,
        java_lang_Native_getActivationStack = 15,
        java_lang_Native_getAddress = 16,
        java_lang_Native_getArrayLength = 17,
        java_lang_Native_getAssociationQueue = 18,
        java_lang_Native_getClass = 19,
        java_lang_Native_getClassState = 20,
        java_lang_Native_getEvent = 21,
        java_lang_Native_getFinalizer = 22,
        java_lang_Native_getHeapHighWaterMark = 23,
        java_lang_Native_getInstructionCount = 24,
        java_lang_Native_getMethodDebugTable = 25,
        java_lang_Native_getNewExecutionContext = 26,
        java_lang_Native_getPersistentMemorySize = 27,
        java_lang_Native_getPersistentMemoryTable = 28,
        java_lang_Native_getStackFrameDepth = 29,
        java_lang_Native_getSuiteList = 30,
        java_lang_Native_getTime = 31,
        java_lang_Native_getargc = 32,
        java_lang_Native_getargvchar = 33,
        java_lang_Native_inRam = 34,
        java_lang_Native_makeEightBitString = 35,
        java_lang_Native_makePersistent = 36,
        java_lang_Native_makePersistentCopy = 37,
        java_lang_Native_makeSixteenBitString = 38,
        java_lang_Native_makeStringOfSymbols = 39,
        java_lang_Native_newPersistentByteArray = 40,
        java_lang_Native_primAstoreOop = 41,
        java_lang_Native_primGetStatic = 42,
        java_lang_Native_primGetStaticLong = 43,
        java_lang_Native_primNewArray = 44,
        java_lang_Native_primNewObject = 45,
        java_lang_Native_primPutStatic = 46,
        java_lang_Native_primPutStaticLong = 47,
        java_lang_Native_primPutStaticObj = 48,
        java_lang_Native_print = 49,
        java_lang_Native_putch = 50,
        java_lang_Native_puterrch = 51,
        java_lang_Native_result = 52,
        java_lang_Native_setAssociationHashtable = 53,
        java_lang_Native_setAssociationQueue = 54,
        java_lang_Native_setClassState = 55,
        java_lang_Native_setExecutionContext = 56,
        java_lang_Native_setFastLockStack = 57,
        java_lang_Native_setMethodDebugTable = 58,
        java_lang_Native_setMinimumHeapMode = 59,
        java_lang_Native_setOutOfMemoryError = 60,
        java_lang_Native_setPersistentMemoryTable = 61,
        java_lang_Native_setSuiteList = 62,
        java_lang_Native_stringcopy0 = 63,
        java_lang_Native_totalMemory = 64,
        java_lang_Native_traceOop = 65,
        java_lang_Native_waitForEvent = 66,
        java_lang_Native_wasPersistentMemoryGCInterrupted = 67;


        /*
         * Accessors for java.lang.ObjectAssociation fields
         */

        /** Getter for 'monitor'. */
/*MAC*/int  ObjectAssociation_getMonitor(int $obj) { return getWord($obj, 0); }
        /** Setter for 'next'. */
/*MAC*/void ObjectAssociation_setNext(int $obj, int $val) { setWord($obj, 1, $val); }
        /** Getter for 'next'. */
/*MAC*/int  ObjectAssociation_getNext(int $obj) { return getWord($obj, 1); }
        /** Setter for 'object'. */
/*MAC*/void ObjectAssociation_setObject(int $obj, int $val) { setWord($obj, 2, $val); }
        /** Getter for 'object'. */
/*MAC*/int  ObjectAssociation_getObject(int $obj) { return getWord($obj, 2); }
        /** Getter for 'hashCode'. */
/*MAC*/int  ObjectAssociation_getHashCode(int $obj) { return getHalf($obj, 6); }
        /** Getter for 'hasFinalizer'. */
/*MAC*/boolean ObjectAssociation_hasFinalizer(int $obj) { return getByte($obj, 14) != 0; }
        /** Setter for 'isMigratable'. */
/*MAC*/void ObjectAssociation_setIsMigratable(int $obj, boolean $val) { setByte($obj, 15, $val ? 1 : 0); }
        /** Getter for 'isMigratable'. */
/*MAC*/boolean ObjectAssociation_isMigratable(int $obj) { return getByte($obj, 15) != 0; }

        /*
         * Accessors for java.lang.Suite fields
         */

        /** Getter for 'classes'. */
/*MAC*/int  Suite_getClasses(int $obj) { return getWord($obj, 0); }
        /** Getter for 'dependentSuiteNames'. */
/*MAC*/int  Suite_getDependentSuiteNames(int $obj) { return getWord($obj, 1); }
        /** Getter for 'name'. */
/*MAC*/int  Suite_getName(int $obj) { return getWord($obj, 2); }

        /*
         * Accessors for java.lang.Thread fields
         */

        /** Setter for 'context'. */
/*MAC*/void Thread_setContext(int $obj, int $val) { setOopRam($obj, 0, $val); }
        /** Getter for 'context'. */
/*MAC*/int  Thread_getContext(int $obj) { return getWord($obj, 0); }

        /*
         * Offsets for java.lang.VMExtension's static methods
         */
        static final int 

        java_lang_VMExtension_abstractMethodError = 1,
        java_lang_VMExtension_arithmeticException = 2,
        java_lang_VMExtension_arrayBoundsException = 3,
        java_lang_VMExtension_astoreOop = 4,
        java_lang_VMExtension_breakpoint = 5,
        java_lang_VMExtension_callrun = 6,
        java_lang_VMExtension_checkcast = 7,
        java_lang_VMExtension_getStatic = 8,
        java_lang_VMExtension_getStaticLong = 9,
        java_lang_VMExtension_illegalStoreException = 10,
        java_lang_VMExtension_initializeClass = 11,
        java_lang_VMExtension_instanceOf = 12,
        java_lang_VMExtension_monitorEnter = 13,
        java_lang_VMExtension_monitorExit = 14,
        java_lang_VMExtension_newArray = 15,
        java_lang_VMExtension_newDimension = 16,
        java_lang_VMExtension_nullPointerException = 17,
        java_lang_VMExtension_putStatic = 18,
        java_lang_VMExtension_putStaticLong = 19,
        java_lang_VMExtension_putStaticObj = 20,
        java_lang_VMExtension_registerForFinalization = 21,
        java_lang_VMExtension_stopVM = 22,
        java_lang_VMExtension_unsatisfiedLinkError = 23,
        java_lang_VMExtension_vmstart = 24,
        java_lang_VMExtension_yield = 25,

        java_lang_VMExtension_MAX_OFFSET = 25;


//IFC//#if 0

    public static int getNativeMethodIdentifierFor(String className, String methodName) {
        String classAndMethodName = className + '.' +methodName;
        if (classAndMethodName.equals("java.lang.Native.arraycopy0")) return 4;
        if (classAndMethodName.equals("java.lang.Native.callStaticNoParm")) return 5;
        if (classAndMethodName.equals("java.lang.Native.callStaticOneParm")) return 6;
        if (classAndMethodName.equals("java.lang.Native.createClassState")) return 7;
        if (classAndMethodName.equals("java.lang.Native.enableExcessiveGC")) return 8;
        if (classAndMethodName.equals("java.lang.Native.exec")) return 9;
        if (classAndMethodName.equals("java.lang.Native.exit")) return 10;
        if (classAndMethodName.equals("java.lang.Native.fatalVMError")) return 11;
        if (classAndMethodName.equals("java.lang.Native.freeMemory")) return 12;
        if (classAndMethodName.equals("java.lang.Native.gc")) return 13;
        if (classAndMethodName.equals("java.lang.Native.gcPersistentMemory")) return 14;
        if (classAndMethodName.equals("java.lang.Native.getActivationStack")) return 15;
        if (classAndMethodName.equals("java.lang.Native.getAddress")) return 16;
        if (classAndMethodName.equals("java.lang.Native.getArrayLength")) return 17;
        if (classAndMethodName.equals("java.lang.Native.getAssociationQueue")) return 18;
        if (classAndMethodName.equals("java.lang.Native.getClass")) return 19;
        if (classAndMethodName.equals("java.lang.Native.getClassState")) return 20;
        if (classAndMethodName.equals("java.lang.Native.getEvent")) return 21;
        if (classAndMethodName.equals("java.lang.Native.getFinalizer")) return 22;
        if (classAndMethodName.equals("java.lang.Native.getHeapHighWaterMark")) return 23;
        if (classAndMethodName.equals("java.lang.Native.getInstructionCount")) return 24;
        if (classAndMethodName.equals("java.lang.Native.getMethodDebugTable")) return 25;
        if (classAndMethodName.equals("java.lang.Native.getNewExecutionContext")) return 26;
        if (classAndMethodName.equals("java.lang.Native.getPersistentMemorySize")) return 27;
        if (classAndMethodName.equals("java.lang.Native.getPersistentMemoryTable")) return 28;
        if (classAndMethodName.equals("java.lang.Native.getStackFrameDepth")) return 29;
        if (classAndMethodName.equals("java.lang.Native.getSuiteList")) return 30;
        if (classAndMethodName.equals("java.lang.Native.getTime")) return 31;
        if (classAndMethodName.equals("java.lang.Native.getargc")) return 32;
        if (classAndMethodName.equals("java.lang.Native.getargvchar")) return 33;
        if (classAndMethodName.equals("java.lang.Native.inRam")) return 34;
        if (classAndMethodName.equals("java.lang.Native.makeEightBitString")) return 35;
        if (classAndMethodName.equals("java.lang.Native.makePersistent")) return 36;
        if (classAndMethodName.equals("java.lang.Native.makePersistentCopy")) return 37;
        if (classAndMethodName.equals("java.lang.Native.makeSixteenBitString")) return 38;
        if (classAndMethodName.equals("java.lang.Native.makeStringOfSymbols")) return 39;
        if (classAndMethodName.equals("java.lang.Native.newPersistentByteArray")) return 40;
        if (classAndMethodName.equals("java.lang.Native.primAstoreOop")) return 41;
        if (classAndMethodName.equals("java.lang.Native.primGetStatic")) return 42;
        if (classAndMethodName.equals("java.lang.Native.primGetStaticLong")) return 43;
        if (classAndMethodName.equals("java.lang.Native.primNewArray")) return 44;
        if (classAndMethodName.equals("java.lang.Native.primNewObject")) return 45;
        if (classAndMethodName.equals("java.lang.Native.primPutStatic")) return 46;
        if (classAndMethodName.equals("java.lang.Native.primPutStaticLong")) return 47;
        if (classAndMethodName.equals("java.lang.Native.primPutStaticObj")) return 48;
        if (classAndMethodName.equals("java.lang.Native.print")) return 49;
        if (classAndMethodName.equals("java.lang.Native.putch")) return 50;
        if (classAndMethodName.equals("java.lang.Native.puterrch")) return 51;
        if (classAndMethodName.equals("java.lang.Native.result")) return 52;
        if (classAndMethodName.equals("java.lang.Native.setAssociationHashtable")) return 53;
        if (classAndMethodName.equals("java.lang.Native.setAssociationQueue")) return 54;
        if (classAndMethodName.equals("java.lang.Native.setClassState")) return 55;
        if (classAndMethodName.equals("java.lang.Native.setExecutionContext")) return 56;
        if (classAndMethodName.equals("java.lang.Native.setFastLockStack")) return 57;
        if (classAndMethodName.equals("java.lang.Native.setMethodDebugTable")) return 58;
        if (classAndMethodName.equals("java.lang.Native.setMinimumHeapMode")) return 59;
        if (classAndMethodName.equals("java.lang.Native.setOutOfMemoryError")) return 60;
        if (classAndMethodName.equals("java.lang.Native.setPersistentMemoryTable")) return 61;
        if (classAndMethodName.equals("java.lang.Native.setSuiteList")) return 62;
        if (classAndMethodName.equals("java.lang.Native.stringcopy0")) return 63;
        if (classAndMethodName.equals("java.lang.Native.totalMemory")) return 64;
        if (classAndMethodName.equals("java.lang.Native.traceOop")) return 65;
        if (classAndMethodName.equals("java.lang.Native.waitForEvent")) return 66;
        if (classAndMethodName.equals("java.lang.Native.wasPersistentMemoryGCInterrupted")) return 67;
        if (classAndMethodName.equals("java.lang.String.at")) return 1;
        if (classAndMethodName.equals("java.lang.String.isEightBit")) return 2;
        if (classAndMethodName.equals("java.lang.String.length")) return 3;
        return -1;
    }

    public static int getInstanceFieldAttributesAndOffset(String className, String fieldName) {
        String classAndFieldName = className + '.' +fieldName;
        if (classAndFieldName.equals("java.lang.Class.access")) return (0x0008 << 16) | 36;
        if (classAndFieldName.equals("java.lang.Class.classReferences")) return (0x0008 << 16) | 0;
        if (classAndFieldName.equals("java.lang.Class.elementType")) return (0x0008 << 16) | 38;
        if (classAndFieldName.equals("java.lang.Class.firstVirtualMethod")) return (0x000A << 16) | 42;
        if (classAndFieldName.equals("java.lang.Class.instanceFieldsLength")) return (0x000A << 16) | 43;
        if (classAndFieldName.equals("java.lang.Class.interfaceSlotTables")) return (0x0008 << 16) | 4;
        if (classAndFieldName.equals("java.lang.Class.interfaceTypes")) return (0x0008 << 16) | 8;
        if (classAndFieldName.equals("java.lang.Class.objectReferences")) return (0x0008 << 16) | 12;
        if (classAndFieldName.equals("java.lang.Class.oopMap")) return (0x0008 << 16) | 16;
        if (classAndFieldName.equals("java.lang.Class.pointerStaticFieldsLength")) return (0x000A << 16) | 44;
        if (classAndFieldName.equals("java.lang.Class.slotForClinit")) return (0x000A << 16) | 45;
        if (classAndFieldName.equals("java.lang.Class.slotForInit")) return (0x000A << 16) | 46;
        if (classAndFieldName.equals("java.lang.Class.slotForMain")) return (0x000A << 16) | 47;
        if (classAndFieldName.equals("java.lang.Class.staticFieldsLength")) return (0x000A << 16) | 48;
        if (classAndFieldName.equals("java.lang.Class.staticMethods")) return (0x0008 << 16) | 20;
        if (classAndFieldName.equals("java.lang.Class.superClass")) return (0x0008 << 16) | 24;
        if (classAndFieldName.equals("java.lang.Class.symbols")) return (0x0008 << 16) | 28;
        if (classAndFieldName.equals("java.lang.Class.type")) return (0x0008 << 16) | 40;
        if (classAndFieldName.equals("java.lang.Class.virtualMethods")) return (0x0008 << 16) | 32;
        if (classAndFieldName.equals("java.lang.Monitor.isInUse")) return (0x0008 << 16) | 14;
        if (classAndFieldName.equals("java.lang.ObjectAssociation.hasFinalizer")) return (0x0008 << 16) | 14;
        if (classAndFieldName.equals("java.lang.ObjectAssociation.hashCode")) return (0x0008 << 16) | 12;
        if (classAndFieldName.equals("java.lang.ObjectAssociation.isMigratable")) return (0x0018 << 16) | 15;
        if (classAndFieldName.equals("java.lang.ObjectAssociation.monitor")) return (0x000C << 16) | 0;
        if (classAndFieldName.equals("java.lang.ObjectAssociation.next")) return (0x001C << 16) | 4;
        if (classAndFieldName.equals("java.lang.ObjectAssociation.object")) return (0x001C << 16) | 8;
        if (classAndFieldName.equals("java.lang.Suite.classes")) return (0x0008 << 16) | 0;
        if (classAndFieldName.equals("java.lang.Suite.dependentSuiteNames")) return (0x0008 << 16) | 4;
        if (classAndFieldName.equals("java.lang.Suite.name")) return (0x0008 << 16) | 8;
        if (classAndFieldName.equals("java.lang.Thread.context")) return (0x0018 << 16) | 0;
        return -1;
    }

    public static int getOffsetForStaticMethodInVMExtension(String methodName) {
        if (methodName.equals("abstractMethodError")) return 1;
        if (methodName.equals("arithmeticException")) return 2;
        if (methodName.equals("arrayBoundsException")) return 3;
        if (methodName.equals("astoreOop")) return 4;
        if (methodName.equals("breakpoint")) return 5;
        if (methodName.equals("callrun")) return 6;
        if (methodName.equals("checkcast")) return 7;
        if (methodName.equals("getStatic")) return 8;
        if (methodName.equals("getStaticLong")) return 9;
        if (methodName.equals("illegalStoreException")) return 10;
        if (methodName.equals("initializeClass")) return 11;
        if (methodName.equals("instanceOf")) return 12;
        if (methodName.equals("monitorEnter")) return 13;
        if (methodName.equals("monitorExit")) return 14;
        if (methodName.equals("newArray")) return 15;
        if (methodName.equals("newDimension")) return 16;
        if (methodName.equals("nullPointerException")) return 17;
        if (methodName.equals("putStatic")) return 18;
        if (methodName.equals("putStaticLong")) return 19;
        if (methodName.equals("putStaticObj")) return 20;
        if (methodName.equals("registerForFinalization")) return 21;
        if (methodName.equals("stopVM")) return 22;
        if (methodName.equals("unsatisfiedLinkError")) return 23;
        if (methodName.equals("vmstart")) return 24;
        if (methodName.equals("yield")) return 25;
        return -1;
    }
//IFC//#endif /* 0 */
/*IFJ*/}
